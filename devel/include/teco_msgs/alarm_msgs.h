// Generated by gencpp from file teco_msgs/alarm_msgs.msg
// DO NOT EDIT!


#ifndef TECO_MSGS_MESSAGE_ALARM_MSGS_H
#define TECO_MSGS_MESSAGE_ALARM_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teco_msgs
{
template <class ContainerAllocator>
struct alarm_msgs_
{
  typedef alarm_msgs_<ContainerAllocator> Type;

  alarm_msgs_()
    : AlarmCode(0)  {
    }
  alarm_msgs_(const ContainerAllocator& _alloc)
    : AlarmCode(0)  {
  (void)_alloc;
    }



   typedef int32_t _AlarmCode_type;
  _AlarmCode_type AlarmCode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HARDWARE_ERROR)
  #undef HARDWARE_ERROR
#endif
#if defined(_WIN32) && defined(CPU_LOAD_ERROR)
  #undef CPU_LOAD_ERROR
#endif
#if defined(_WIN32) && defined(MEMORY_ERROR)
  #undef MEMORY_ERROR
#endif
#if defined(_WIN32) && defined(ETHERNET_ERROR)
  #undef ETHERNET_ERROR
#endif
#if defined(_WIN32) && defined(HDD_ERROR)
  #undef HDD_ERROR
#endif
#if defined(_WIN32) && defined(BATTERY_ERROR)
  #undef BATTERY_ERROR
#endif
#if defined(_WIN32) && defined(IMU_ERROR)
  #undef IMU_ERROR
#endif
#if defined(_WIN32) && defined(MOTOR_ERROR)
  #undef MOTOR_ERROR
#endif
#if defined(_WIN32) && defined(LASER_ERROR)
  #undef LASER_ERROR
#endif
#if defined(_WIN32) && defined(CAMERA_ERROR)
  #undef CAMERA_ERROR
#endif
#if defined(_WIN32) && defined(SAFETY_SYSTEM_ERROR)
  #undef SAFETY_SYSTEM_ERROR
#endif
#if defined(_WIN32) && defined(HOOK_ERROR)
  #undef HOOK_ERROR
#endif
#if defined(_WIN32) && defined(HOOK_CAMERA_ERROR)
  #undef HOOK_CAMERA_ERROR
#endif
#if defined(_WIN32) && defined(HOOK_ACTUATOR_ERROR)
  #undef HOOK_ACTUATOR_ERROR
#endif
#if defined(_WIN32) && defined(HOOK_BRAKE_ERROR)
  #undef HOOK_BRAKE_ERROR
#endif
#if defined(_WIN32) && defined(HOOK_ENCODER_ERROR)
  #undef HOOK_ENCODER_ERROR
#endif
#if defined(_WIN32) && defined(MISSING_ERROR)
  #undef MISSING_ERROR
#endif
#if defined(_WIN32) && defined(SOFTWARE_ERROR)
  #undef SOFTWARE_ERROR
#endif
#if defined(_WIN32) && defined(MISSION_ERROR)
  #undef MISSION_ERROR
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR)
  #undef LOCALIZATION_ERROR
#endif
#if defined(_WIN32) && defined(MAPPING_ERROR)
  #undef MAPPING_ERROR
#endif
#if defined(_WIN32) && defined(ODOM_FUSION_ERROR)
  #undef ODOM_FUSION_ERROR
#endif

  enum {
    HARDWARE_ERROR = 0,
    CPU_LOAD_ERROR = 100,
    MEMORY_ERROR = 200,
    ETHERNET_ERROR = 300,
    HDD_ERROR = 400,
    BATTERY_ERROR = 500,
    IMU_ERROR = 600,
    MOTOR_ERROR = 700,
    LASER_ERROR = 800,
    CAMERA_ERROR = 900,
    SAFETY_SYSTEM_ERROR = 1000,
    HOOK_ERROR = 5000,
    HOOK_CAMERA_ERROR = 5100,
    HOOK_ACTUATOR_ERROR = 5200,
    HOOK_BRAKE_ERROR = 5300,
    HOOK_ENCODER_ERROR = 5400,
    MISSING_ERROR = 9000,
    SOFTWARE_ERROR = 10000,
    MISSION_ERROR = 10100,
    LOCALIZATION_ERROR = 10200,
    MAPPING_ERROR = 10300,
    ODOM_FUSION_ERROR = 10400,
  };


  typedef boost::shared_ptr< ::teco_msgs::alarm_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teco_msgs::alarm_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct alarm_msgs_

typedef ::teco_msgs::alarm_msgs_<std::allocator<void> > alarm_msgs;

typedef boost::shared_ptr< ::teco_msgs::alarm_msgs > alarm_msgsPtr;
typedef boost::shared_ptr< ::teco_msgs::alarm_msgs const> alarm_msgsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teco_msgs::alarm_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teco_msgs::alarm_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teco_msgs::alarm_msgs_<ContainerAllocator1> & lhs, const ::teco_msgs::alarm_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.AlarmCode == rhs.AlarmCode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teco_msgs::alarm_msgs_<ContainerAllocator1> & lhs, const ::teco_msgs::alarm_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teco_msgs::alarm_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teco_msgs::alarm_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teco_msgs::alarm_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "884ae1ac9e2728856a940ceceb8d7c1b";
  }

  static const char* value(const ::teco_msgs::alarm_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x884ae1ac9e272885ULL;
  static const uint64_t static_value2 = 0x6a940ceceb8d7c1bULL;
};

template<class ContainerAllocator>
struct DataType< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teco_msgs/alarm_msgs";
  }

  static const char* value(const ::teco_msgs::alarm_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of offsets indicating what type an error is\n"
"int32 HARDWARE_ERROR = 0\n"
"int32 CPU_LOAD_ERROR = 100\n"
"int32 MEMORY_ERROR = 200\n"
"int32 ETHERNET_ERROR = 300\n"
"int32 HDD_ERROR = 400\n"
"int32 BATTERY_ERROR = 500\n"
"int32 IMU_ERROR = 600\n"
"int32 MOTOR_ERROR = 700\n"
"int32 LASER_ERROR = 800\n"
"int32 CAMERA_ERROR = 900\n"
"int32 SAFETY_SYSTEM_ERROR = 1000\n"
"int32 HOOK_ERROR = 5000\n"
"int32 HOOK_CAMERA_ERROR = 5100\n"
"int32 HOOK_ACTUATOR_ERROR = 5200\n"
"int32 HOOK_BRAKE_ERROR = 5300\n"
"int32 HOOK_ENCODER_ERROR = 5400\n"
"int32 MISSING_ERROR = 9000\n"
"int32 SOFTWARE_ERROR = 10000\n"
"int32 MISSION_ERROR = 10100\n"
"int32 LOCALIZATION_ERROR = 10200\n"
"int32 MAPPING_ERROR = 10300\n"
"int32 ODOM_FUSION_ERROR = 10400\n"
"\n"
"int32 AlarmCode\n"
;
  }

  static const char* value(const ::teco_msgs::alarm_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.AlarmCode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alarm_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teco_msgs::alarm_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teco_msgs::alarm_msgs_<ContainerAllocator>& v)
  {
    s << indent << "AlarmCode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AlarmCode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TECO_MSGS_MESSAGE_ALARM_MSGS_H
