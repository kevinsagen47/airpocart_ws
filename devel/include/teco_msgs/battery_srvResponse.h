// Generated by gencpp from file teco_msgs/battery_srvResponse.msg
// DO NOT EDIT!


#ifndef TECO_MSGS_MESSAGE_BATTERY_SRVRESPONSE_H
#define TECO_MSGS_MESSAGE_BATTERY_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teco_msgs
{
template <class ContainerAllocator>
struct battery_srvResponse_
{
  typedef battery_srvResponse_<ContainerAllocator> Type;

  battery_srvResponse_()
    : PackageVoltage(0.0)
    , PackageCurrent(0.0)
    , SOHP(0.0)
    , SOCP(0.0)
    , AHCnow(0.0)
    , AHCmax(0.0)
    , CurrentSensorValue1(0.0)
    , CurrentSensorValue2(0.0)
    , TemperaturePack(0.0)
    , CellTemperature1(0.0)
    , CellTemperature2(0.0)
    , CellTemperature3(0.0)
    , CellTemperature4(0.0)
    , CellTemperature5(0.0)
    , CellTemperature6(0.0)
    , CellTemperature7(0.0)
    , CellVoltage1(0.0)
    , CellVoltage2(0.0)
    , CellVoltage3(0.0)
    , CellVoltage4(0.0)
    , CellVoltage5(0.0)
    , CellVoltage6(0.0)
    , CellVoltage7(0.0)
    , CellSOC1(0.0)
    , CellSOC2(0.0)
    , CellSOC3(0.0)
    , CellSOC4(0.0)
    , CellSOC5(0.0)
    , CellSOC6(0.0)
    , CellSOC7(0.0)
    , CellSOH1(0.0)
    , CellSOH2(0.0)
    , CellSOH3(0.0)
    , CellSOH4(0.0)
    , CellSOH5(0.0)
    , CellSOH6(0.0)
    , CellSOH7(0.0)  {
    }
  battery_srvResponse_(const ContainerAllocator& _alloc)
    : PackageVoltage(0.0)
    , PackageCurrent(0.0)
    , SOHP(0.0)
    , SOCP(0.0)
    , AHCnow(0.0)
    , AHCmax(0.0)
    , CurrentSensorValue1(0.0)
    , CurrentSensorValue2(0.0)
    , TemperaturePack(0.0)
    , CellTemperature1(0.0)
    , CellTemperature2(0.0)
    , CellTemperature3(0.0)
    , CellTemperature4(0.0)
    , CellTemperature5(0.0)
    , CellTemperature6(0.0)
    , CellTemperature7(0.0)
    , CellVoltage1(0.0)
    , CellVoltage2(0.0)
    , CellVoltage3(0.0)
    , CellVoltage4(0.0)
    , CellVoltage5(0.0)
    , CellVoltage6(0.0)
    , CellVoltage7(0.0)
    , CellSOC1(0.0)
    , CellSOC2(0.0)
    , CellSOC3(0.0)
    , CellSOC4(0.0)
    , CellSOC5(0.0)
    , CellSOC6(0.0)
    , CellSOC7(0.0)
    , CellSOH1(0.0)
    , CellSOH2(0.0)
    , CellSOH3(0.0)
    , CellSOH4(0.0)
    , CellSOH5(0.0)
    , CellSOH6(0.0)
    , CellSOH7(0.0)  {
  (void)_alloc;
    }



   typedef float _PackageVoltage_type;
  _PackageVoltage_type PackageVoltage;

   typedef float _PackageCurrent_type;
  _PackageCurrent_type PackageCurrent;

   typedef float _SOHP_type;
  _SOHP_type SOHP;

   typedef float _SOCP_type;
  _SOCP_type SOCP;

   typedef float _AHCnow_type;
  _AHCnow_type AHCnow;

   typedef float _AHCmax_type;
  _AHCmax_type AHCmax;

   typedef float _CurrentSensorValue1_type;
  _CurrentSensorValue1_type CurrentSensorValue1;

   typedef float _CurrentSensorValue2_type;
  _CurrentSensorValue2_type CurrentSensorValue2;

   typedef float _TemperaturePack_type;
  _TemperaturePack_type TemperaturePack;

   typedef float _CellTemperature1_type;
  _CellTemperature1_type CellTemperature1;

   typedef float _CellTemperature2_type;
  _CellTemperature2_type CellTemperature2;

   typedef float _CellTemperature3_type;
  _CellTemperature3_type CellTemperature3;

   typedef float _CellTemperature4_type;
  _CellTemperature4_type CellTemperature4;

   typedef float _CellTemperature5_type;
  _CellTemperature5_type CellTemperature5;

   typedef float _CellTemperature6_type;
  _CellTemperature6_type CellTemperature6;

   typedef float _CellTemperature7_type;
  _CellTemperature7_type CellTemperature7;

   typedef float _CellVoltage1_type;
  _CellVoltage1_type CellVoltage1;

   typedef float _CellVoltage2_type;
  _CellVoltage2_type CellVoltage2;

   typedef float _CellVoltage3_type;
  _CellVoltage3_type CellVoltage3;

   typedef float _CellVoltage4_type;
  _CellVoltage4_type CellVoltage4;

   typedef float _CellVoltage5_type;
  _CellVoltage5_type CellVoltage5;

   typedef float _CellVoltage6_type;
  _CellVoltage6_type CellVoltage6;

   typedef float _CellVoltage7_type;
  _CellVoltage7_type CellVoltage7;

   typedef float _CellSOC1_type;
  _CellSOC1_type CellSOC1;

   typedef float _CellSOC2_type;
  _CellSOC2_type CellSOC2;

   typedef float _CellSOC3_type;
  _CellSOC3_type CellSOC3;

   typedef float _CellSOC4_type;
  _CellSOC4_type CellSOC4;

   typedef float _CellSOC5_type;
  _CellSOC5_type CellSOC5;

   typedef float _CellSOC6_type;
  _CellSOC6_type CellSOC6;

   typedef float _CellSOC7_type;
  _CellSOC7_type CellSOC7;

   typedef float _CellSOH1_type;
  _CellSOH1_type CellSOH1;

   typedef float _CellSOH2_type;
  _CellSOH2_type CellSOH2;

   typedef float _CellSOH3_type;
  _CellSOH3_type CellSOH3;

   typedef float _CellSOH4_type;
  _CellSOH4_type CellSOH4;

   typedef float _CellSOH5_type;
  _CellSOH5_type CellSOH5;

   typedef float _CellSOH6_type;
  _CellSOH6_type CellSOH6;

   typedef float _CellSOH7_type;
  _CellSOH7_type CellSOH7;





  typedef boost::shared_ptr< ::teco_msgs::battery_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teco_msgs::battery_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct battery_srvResponse_

typedef ::teco_msgs::battery_srvResponse_<std::allocator<void> > battery_srvResponse;

typedef boost::shared_ptr< ::teco_msgs::battery_srvResponse > battery_srvResponsePtr;
typedef boost::shared_ptr< ::teco_msgs::battery_srvResponse const> battery_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teco_msgs::battery_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teco_msgs::battery_srvResponse_<ContainerAllocator1> & lhs, const ::teco_msgs::battery_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.PackageVoltage == rhs.PackageVoltage &&
    lhs.PackageCurrent == rhs.PackageCurrent &&
    lhs.SOHP == rhs.SOHP &&
    lhs.SOCP == rhs.SOCP &&
    lhs.AHCnow == rhs.AHCnow &&
    lhs.AHCmax == rhs.AHCmax &&
    lhs.CurrentSensorValue1 == rhs.CurrentSensorValue1 &&
    lhs.CurrentSensorValue2 == rhs.CurrentSensorValue2 &&
    lhs.TemperaturePack == rhs.TemperaturePack &&
    lhs.CellTemperature1 == rhs.CellTemperature1 &&
    lhs.CellTemperature2 == rhs.CellTemperature2 &&
    lhs.CellTemperature3 == rhs.CellTemperature3 &&
    lhs.CellTemperature4 == rhs.CellTemperature4 &&
    lhs.CellTemperature5 == rhs.CellTemperature5 &&
    lhs.CellTemperature6 == rhs.CellTemperature6 &&
    lhs.CellTemperature7 == rhs.CellTemperature7 &&
    lhs.CellVoltage1 == rhs.CellVoltage1 &&
    lhs.CellVoltage2 == rhs.CellVoltage2 &&
    lhs.CellVoltage3 == rhs.CellVoltage3 &&
    lhs.CellVoltage4 == rhs.CellVoltage4 &&
    lhs.CellVoltage5 == rhs.CellVoltage5 &&
    lhs.CellVoltage6 == rhs.CellVoltage6 &&
    lhs.CellVoltage7 == rhs.CellVoltage7 &&
    lhs.CellSOC1 == rhs.CellSOC1 &&
    lhs.CellSOC2 == rhs.CellSOC2 &&
    lhs.CellSOC3 == rhs.CellSOC3 &&
    lhs.CellSOC4 == rhs.CellSOC4 &&
    lhs.CellSOC5 == rhs.CellSOC5 &&
    lhs.CellSOC6 == rhs.CellSOC6 &&
    lhs.CellSOC7 == rhs.CellSOC7 &&
    lhs.CellSOH1 == rhs.CellSOH1 &&
    lhs.CellSOH2 == rhs.CellSOH2 &&
    lhs.CellSOH3 == rhs.CellSOH3 &&
    lhs.CellSOH4 == rhs.CellSOH4 &&
    lhs.CellSOH5 == rhs.CellSOH5 &&
    lhs.CellSOH6 == rhs.CellSOH6 &&
    lhs.CellSOH7 == rhs.CellSOH7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teco_msgs::battery_srvResponse_<ContainerAllocator1> & lhs, const ::teco_msgs::battery_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teco_msgs::battery_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teco_msgs::battery_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teco_msgs::battery_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f76442e7ca355905447f2ebc796d5598";
  }

  static const char* value(const ::teco_msgs::battery_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf76442e7ca355905ULL;
  static const uint64_t static_value2 = 0x447f2ebc796d5598ULL;
};

template<class ContainerAllocator>
struct DataType< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teco_msgs/battery_srvResponse";
  }

  static const char* value(const ::teco_msgs::battery_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 PackageVoltage\n"
"float32 PackageCurrent\n"
"\n"
"float32 SOHP\n"
"float32 SOCP\n"
"float32 AHCnow\n"
"float32 AHCmax\n"
"\n"
"float32 CurrentSensorValue1\n"
"float32 CurrentSensorValue2\n"
"\n"
"float32 TemperaturePack\n"
"\n"
"float32 CellTemperature1\n"
"float32 CellTemperature2\n"
"float32 CellTemperature3\n"
"float32 CellTemperature4\n"
"\n"
"float32 CellTemperature5\n"
"float32 CellTemperature6\n"
"float32 CellTemperature7\n"
"\n"
"float32 CellVoltage1\n"
"float32 CellVoltage2\n"
"float32 CellVoltage3\n"
"float32 CellVoltage4\n"
"\n"
"float32 CellVoltage5\n"
"float32 CellVoltage6\n"
"float32 CellVoltage7\n"
"\n"
"float32 CellSOC1\n"
"float32 CellSOC2\n"
"float32 CellSOC3\n"
"float32 CellSOC4\n"
"\n"
"float32 CellSOC5\n"
"float32 CellSOC6\n"
"float32 CellSOC7\n"
"\n"
"float32 CellSOH1\n"
"float32 CellSOH2\n"
"float32 CellSOH3\n"
"float32 CellSOH4\n"
"\n"
"float32 CellSOH5\n"
"float32 CellSOH6\n"
"float32 CellSOH7\n"
"\n"
;
  }

  static const char* value(const ::teco_msgs::battery_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.PackageVoltage);
      stream.next(m.PackageCurrent);
      stream.next(m.SOHP);
      stream.next(m.SOCP);
      stream.next(m.AHCnow);
      stream.next(m.AHCmax);
      stream.next(m.CurrentSensorValue1);
      stream.next(m.CurrentSensorValue2);
      stream.next(m.TemperaturePack);
      stream.next(m.CellTemperature1);
      stream.next(m.CellTemperature2);
      stream.next(m.CellTemperature3);
      stream.next(m.CellTemperature4);
      stream.next(m.CellTemperature5);
      stream.next(m.CellTemperature6);
      stream.next(m.CellTemperature7);
      stream.next(m.CellVoltage1);
      stream.next(m.CellVoltage2);
      stream.next(m.CellVoltage3);
      stream.next(m.CellVoltage4);
      stream.next(m.CellVoltage5);
      stream.next(m.CellVoltage6);
      stream.next(m.CellVoltage7);
      stream.next(m.CellSOC1);
      stream.next(m.CellSOC2);
      stream.next(m.CellSOC3);
      stream.next(m.CellSOC4);
      stream.next(m.CellSOC5);
      stream.next(m.CellSOC6);
      stream.next(m.CellSOC7);
      stream.next(m.CellSOH1);
      stream.next(m.CellSOH2);
      stream.next(m.CellSOH3);
      stream.next(m.CellSOH4);
      stream.next(m.CellSOH5);
      stream.next(m.CellSOH6);
      stream.next(m.CellSOH7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct battery_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teco_msgs::battery_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teco_msgs::battery_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "PackageVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.PackageVoltage);
    s << indent << "PackageCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.PackageCurrent);
    s << indent << "SOHP: ";
    Printer<float>::stream(s, indent + "  ", v.SOHP);
    s << indent << "SOCP: ";
    Printer<float>::stream(s, indent + "  ", v.SOCP);
    s << indent << "AHCnow: ";
    Printer<float>::stream(s, indent + "  ", v.AHCnow);
    s << indent << "AHCmax: ";
    Printer<float>::stream(s, indent + "  ", v.AHCmax);
    s << indent << "CurrentSensorValue1: ";
    Printer<float>::stream(s, indent + "  ", v.CurrentSensorValue1);
    s << indent << "CurrentSensorValue2: ";
    Printer<float>::stream(s, indent + "  ", v.CurrentSensorValue2);
    s << indent << "TemperaturePack: ";
    Printer<float>::stream(s, indent + "  ", v.TemperaturePack);
    s << indent << "CellTemperature1: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature1);
    s << indent << "CellTemperature2: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature2);
    s << indent << "CellTemperature3: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature3);
    s << indent << "CellTemperature4: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature4);
    s << indent << "CellTemperature5: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature5);
    s << indent << "CellTemperature6: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature6);
    s << indent << "CellTemperature7: ";
    Printer<float>::stream(s, indent + "  ", v.CellTemperature7);
    s << indent << "CellVoltage1: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage1);
    s << indent << "CellVoltage2: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage2);
    s << indent << "CellVoltage3: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage3);
    s << indent << "CellVoltage4: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage4);
    s << indent << "CellVoltage5: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage5);
    s << indent << "CellVoltage6: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage6);
    s << indent << "CellVoltage7: ";
    Printer<float>::stream(s, indent + "  ", v.CellVoltage7);
    s << indent << "CellSOC1: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC1);
    s << indent << "CellSOC2: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC2);
    s << indent << "CellSOC3: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC3);
    s << indent << "CellSOC4: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC4);
    s << indent << "CellSOC5: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC5);
    s << indent << "CellSOC6: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC6);
    s << indent << "CellSOC7: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOC7);
    s << indent << "CellSOH1: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH1);
    s << indent << "CellSOH2: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH2);
    s << indent << "CellSOH3: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH3);
    s << indent << "CellSOH4: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH4);
    s << indent << "CellSOH5: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH5);
    s << indent << "CellSOH6: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH6);
    s << indent << "CellSOH7: ";
    Printer<float>::stream(s, indent + "  ", v.CellSOH7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TECO_MSGS_MESSAGE_BATTERY_SRVRESPONSE_H
