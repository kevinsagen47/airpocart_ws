// Generated by gencpp from file dynamic_tutorials/dynCmd.msg
// DO NOT EDIT!


#ifndef DYNAMIC_TUTORIALS_MESSAGE_DYNCMD_H
#define DYNAMIC_TUTORIALS_MESSAGE_DYNCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamic_tutorials
{
template <class ContainerAllocator>
struct dynCmd_
{
  typedef dynCmd_<ContainerAllocator> Type;

  dynCmd_()
    : cmdType(0)
    , para()  {
    }
  dynCmd_(const ContainerAllocator& _alloc)
    : cmdType(0)
    , para(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _cmdType_type;
  _cmdType_type cmdType;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _para_type;
  _para_type para;





  typedef boost::shared_ptr< ::dynamic_tutorials::dynCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_tutorials::dynCmd_<ContainerAllocator> const> ConstPtr;

}; // struct dynCmd_

typedef ::dynamic_tutorials::dynCmd_<std::allocator<void> > dynCmd;

typedef boost::shared_ptr< ::dynamic_tutorials::dynCmd > dynCmdPtr;
typedef boost::shared_ptr< ::dynamic_tutorials::dynCmd const> dynCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamic_tutorials::dynCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamic_tutorials::dynCmd_<ContainerAllocator1> & lhs, const ::dynamic_tutorials::dynCmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmdType == rhs.cmdType &&
    lhs.para == rhs.para;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamic_tutorials::dynCmd_<ContainerAllocator1> & lhs, const ::dynamic_tutorials::dynCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamic_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_tutorials::dynCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamic_tutorials::dynCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_tutorials::dynCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3d95f1c672c95f8620a00173f3fc89c";
  }

  static const char* value(const ::dynamic_tutorials::dynCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3d95f1c672c95f8ULL;
  static const uint64_t static_value2 = 0x620a00173f3fc89cULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamic_tutorials/dynCmd";
  }

  static const char* value(const ::dynamic_tutorials::dynCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 cmdType\n"
"float32[] para\n"
"\n"
"\n"
;
  }

  static const char* value(const ::dynamic_tutorials::dynCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmdType);
      stream.next(m.para);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dynCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_tutorials::dynCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamic_tutorials::dynCmd_<ContainerAllocator>& v)
  {
    s << indent << "cmdType: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmdType);
    s << indent << "para[]" << std::endl;
    for (size_t i = 0; i < v.para.size(); ++i)
    {
      s << indent << "  para[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.para[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_TUTORIALS_MESSAGE_DYNCMD_H
